#!/bin/bash


# Set variables to default values.
concat=0
manual=0
help=0
newline=0
generate=0
server="termbin.com 9999"
a=0 # For "[ip] [port]" extraction loop.

# Parse arguments
for arg in "$@"
do
	if [[ "${arg:0:1}" == "-" && "${arg:0:2}" != "--" ]] # If the string starts with "-", but not "--"
	then
		while read -n1 char
		do
			if [ "$char" == "c" ]  # Check if the user wants to concatenate multiple files.
			then
				concat=1

			elif [ "$char" == "m" ] # Check if the user is manually entering text to paste.
			then
				manual=1

			elif [ "$char" == "h" ] # Check if the user wants the help menu.
			then
				help=1

			elif [ "$char" == "n" ] # Check if the user wants newlines after each file in concat mode.
			then
				newline=1

			elif [ "$char" == "g" ] # Check if the user wants to generate a config file.
			then
				generate=1
			fi
		done < <(printf ${arg:1:$(( ${#arg}-1 ))}) # Printf the value of arg after the first character (dash) to avoid printf trying to parse it as an argument.
	elif [ "$arg" == "--concat" ]  # Check if the user wants to concatenate multiple files.
	then
		concat=1

	elif [ "$arg" == "--manual" ] # Check if the user is manually entering text to paste.
	then
		manual=1

	elif [ "$arg" == "--help" ] # Check if the user wants the help menu.
	then
		help=1

	elif [ "$arg" == "--newline" ] # Check if the user wants newlines after each file in concat mode.
	then
		newline=1

	elif [ "$arg" == "--generate" ] # Check if the user wants to generate a config file.
	then
		generate=1
	else
		files="$files$arg " # Add files to list.
	fi
done

# If config file exists, load it.
if [ -e ~/.tb/config ]
then
	. ~/.tb/config
fi

# If the user wants to generate a config file, do so.
if [ $generate -eq 1 ]
then
	mkdir -p ~/.tb
	echo "Enter fiche server in the format: [host] [port]"
	echo "(If left blank, will default to termbin.com)"
	read server
	if [ "$server" == "" ]
	then
		echo 'server="termbin.com 9999"' > ~/.tb/config
	else
		echo "server=\"$server\"" > ~/.tb/config
	fi
fi

# Extract server ip/hostname and port from single variable for netcat.
for i in $server
do
	if [ $a -eq 0 ]
	then
		host="$i"
	else
		port="$i"
	fi
	a=$(( a+1 ))
done

# If the user wants the help menu, show it.
if [ $help -eq 1 ]
then
	echo "Usage:  tb [options] [files]"
	echo "-c, --concat:		Concatenate multiple files to one paste."
	echo "-g, --generate:		Generate config file."
	echo "-m, --manual:		Manually enter text. Hit Ctrl+D to end entry."
	echo "-n, --newline:		Add newline after each file in concat mode."
	echo "-h, --help:		Show this help menu."
# Check if the user is passing in files to read.
elif [[ "$1" != "" && "$@" != *"-m"* && "$@" != *"--manual"* ]]
then
	# If the user wants to concatenate multiple files, do so and upload the result.
	if [ $concat -eq 1 ]
	then
		# If the user wants to, put a newline after each file.
		if [ $newline -eq 1 ]
		then
			for file in $files
			do
				if [ "$string" == "" ]
				then
					string="$(<$file)"
				else
					string="$string\n$(<$file)"
				fi
			done
		# Alternatively, don't put a newline after each file.
		else
			for file in $files
			do
				string="$string$(<$file)"
			done
		fi
		# Upload the paste.
		printf "$string" | nc "$host" "$port"
	# Alternatively, upload each file individually.
	else
		for file in $@
		do
			nc "$host" "$port" <$file
		done
	fi
else
	# If manual, buffer text before opening connection to avoid "Use netcat." timeout.
	if [ $manual -eq 1 ]
	then
		string="$(cat)" # Could use $(</dev/stdin), but that would require a unix-like OS.
		printf "$string" | nc "$host" "$port"
	else
		nc "$host" "$port"
	fi
fi
